<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>第2章、Java编程环境</title>
      <link href="/2025/08/13/%E5%9B%9E%E5%BD%92/"/>
      <url>/2025/08/13/%E5%9B%9E%E5%BD%92/</url>
      
        <content type="html"><![CDATA[<h1 id="我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了"><a href="#我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了" class="headerlink" title="我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了"></a>我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了我回来了</h1>]]></content>
      
      
      <categories>
          
          <category> java核心技术 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第2章、Java编程环境</title>
      <link href="/2023/08/28/%E7%AC%AC2%E7%AB%A0%E3%80%81Java%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/"/>
      <url>/2023/08/28/%E7%AC%AC2%E7%AB%A0%E3%80%81Java%E7%BC%96%E7%A8%8B%E7%8E%AF%E5%A2%83/</url>
      
        <content type="html"><![CDATA[<h2 id="2-1、安装Java开发工具包"><a href="#2-1、安装Java开发工具包" class="headerlink" title="2.1、安装Java开发工具包"></a>2.1、安装Java开发工具包</h2><p>原先，Oracle公司会提供最新、最完备的Java开发工具包（JDK）版本。</p><p>如今，很多不同公司（包括Microsoft、Amazon、Red Hat、Azul）都提供最新的OpenJDK构建版本；有些公司的许可条件比Oracle公司更宽松。</p><h3 id="下载JDK"><a href="#下载JDK" class="headerlink" title="下载JDK"></a>下载JDK</h3><p>可以从 <a href="https://adoptium.net/">https://adoptium.net</a> 下载Java开发工具包，或者也可以从Oracle公司官网 <a href="https://www.oracle.com/technetwork/java/javase/downloads">https://www.oracle.com/technetwork/java/javase/downloads</a> 或其他提供商下载。</p><h3 id="设置JDK"><a href="#设置JDK" class="headerlink" title="设置JDK"></a>设置JDK</h3><h4 id="下载JDK-1"><a href="#下载JDK-1" class="headerlink" title="下载JDK"></a>下载JDK</h4><ul><li>在Windows上，启动安装软件，会询问你要把JDK安装在哪里。最好不要接受默认位置（这个路径中有空格），如 c:\Program Files\Java\jdk-17.0.x 。替换路径名中的 Program Files 部分就可以了。</li><li>在Mac上，运行安装程序。就会把软件安装到 &#x2F;Library&#x2F;Java&#x2F;JavaVirtualMachines&#x2F;jdk-17.0.x.jdk&#x2F;Contents&#x2F;Home 。可以用Finder找到这个目录。</li><li>在Linux上，只需要把 .tar.gz 文件解压缩到你选择的某个位置，如你的主目录或者&#x2F;opt。如果从RPM文件安装，则要仔细确认安装到 &#x2F;usr&#x2F;java&#x2F;jdk-17.0.x 中。</li></ul><h4 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h4><p>在Windows或Linux上安装JDK时，还需要完成另外一个步骤：将JDK的bin目录添加到可执行路径中—可执行路径是操作系统查找可执行文件时所遍历的目录列表。</p><ul><li><p>在Linux中，需要在 ~&#x2F;.bashrc 或 ~&#x2F;.bash_profile 文件的最后增加这样一行：</p><pre><code class="language-she">export PATH=jdk/bin:$PATH</code></pre><p>一定要使用正确的JDK路径，如 &#x2F;opt&#x2F;jdk-17.0.4</p></li><li><p>在Windows 10中，</p><ul><li><p>我的电脑【右击】 –&gt; 选择 属性 –&gt; 高级系统设置 –&gt; 环境变量</p></li><li><p>在系统变量 位置点击 【新建】 并进行相关设置，</p><pre><code class="language-shell">Variable name :     JAVA_HOMEVariable value :    C:\soft\java\jdk-17.0.4</code></pre></li><li><p>在系统变量 位置 选中 Path 并 点击 【编辑】 并 点击 New 进行新增</p><pre><code class="language-shell">%JAVA_HOME%\bin</code></pre></li></ul><p>打开一个终端窗口，键入</p><pre><code class="language-shell">java --version</code></pre><p>回车看到Java对应版本号，则表示JDK设置成功了。</p></li></ul><h2 id="2-2、使用命令行工具"><a href="#2-2、使用命令行工具" class="headerlink" title="2.2、使用命令行工具"></a>2.2、使用命令行工具</h2><p>首先编写 Hello.java 文件</p><pre><code class="language-java">public class Hello&#123;  public static void main(String[] args)&#123;    System.out.println(&quot;hello world.&quot;);  &#125;&#125;</code></pre><p>然后，在Hello.java所在目录打开命令行，输入</p><pre><code class="language-java">javac Hello.java //生成字节码Hello.class文件java Hello //执行Hello.class，将会输出：hello world.</code></pre><p>祝贺你！你已经编译并运行了第一个Java程序。</p><h2 id="2-3、使用集成开发环境"><a href="#2-3、使用集成开发环境" class="headerlink" title="2.3、使用集成开发环境"></a>2.3、使用集成开发环境</h2><p>对于大多数日常工作来说，还是应当使用集成开发环境。这些环境非常强大，也很方便，不使用这些集成开发环境简直有些不合情理。我们可以免费得到一些很棒的开发环境，如 Eclipse、IntelliJ IDEA 和 NetBeans 。</p><h2 id="2-4、JShell"><a href="#2-4、JShell" class="headerlink" title="2.4、JShell"></a>2.4、JShell</h2><p>Java 9 引入了另一种使用Java的方法。JShell程序提供了一个“读取-评估-打印循环”（Read - Evaluate - Print Loop，REPL）。键入一个Java表达式，JShell会评估输入，打印结果，并等待下一个输入。</p><pre><code class="language-shell">~$ jshell|Welcome to JShell--Version 17|For an introductiontype:/helpintrojshell&gt;&quot;Core Java&quot;.length()$1 ==&gt; 9jshell&gt;5 * $1 - 3$2 ==&gt; 42jshell&gt; int answer = 6 * 7answer ==&gt; 42#tab补全jshell&gt; Math.loglog(log10(log1p(jshell&gt;Math.log10(0.001)$3 ==&gt; -3.0jshell&gt; Math.log10(1000)$4 ==&gt; 3.0</code></pre><p>JShell会让Java语言和类库的学习变得轻松而有趣，它不要求你启动一个庞大的开发环境，不会让你再为 <code>public static void main</code> 而困扰。</p>]]></content>
      
      
      <categories>
          
          <category> java核心技术 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第1章Java程序设计概述</title>
      <link href="/2023/08/25/%E7%AC%AC1%E7%AB%A0%E3%80%81Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/"/>
      <url>/2023/08/25/%E7%AC%AC1%E7%AB%A0%E3%80%81Java%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E6%A6%82%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-1、Java-程序设计平台"><a href="#1-1、Java-程序设计平台" class="headerlink" title="1.1、Java 程序设计平台"></a>1.1、Java 程序设计平台</h2><p>Java是一个<mark class="hl-label blue">完整的平台</mark>，有一个<mark class="hl-label blue">庞大的库</mark>，其中包含了<mark class="hl-label blue">大量可重用的代码</mark>，还有提供诸如<mark class="hl-label default">安全性</mark>、<mark class="hl-label default">跨操作系统</mark>的<mark class="hl-label orange">可移植性</mark>以及<mark class="hl-label orange">自动垃圾收集</mark>等服务的<mark class="hl-label blue">执行环境</mark>。</p><h2 id="1-2、Java-白皮书的关键术语"><a href="#1-2、Java-白皮书的关键术语" class="headerlink" title="1.2、Java 白皮书的关键术语"></a>1.2、Java 白皮书的关键术语</h2><ul><li><mark class="hl-label blue">简单性</mark><blockquote><p>Java语法是C++语法的一个“纯净”版本。Java剔除了C++中许多很少使用、难以理解、容易混淆的特性。</p><p>“简单”的另一面是“小”。Java的目标之一是支持开发能够在小型机器上独立运行的软件，这类软件通常适用于嵌入式设备和智能卡。</p></blockquote></li><li><mark class="hl-label blue">面向对象</mark><blockquote><p>开发Java时面向对象技术已经相当成熟。在Java中使用了更简单的接口概念，取代了C++中的多重继承。</p></blockquote></li><li><mark class="hl-label blue">分布式</mark><blockquote><p>Java能够通过URL打开和访问网上的对象，其便捷程度就好像访问本地文件一样。</p><p>如今，这一点被认为理所当然，不过在1995年主要还是从C++或Visual Basic程序连接Web服务器。</p></blockquote></li><li><mark class="hl-label blue">健壮性</mark><blockquote><p>Java编译器能够检测许多其他语言中仅在运行时才能检测出来的问题。</p><p>Java与C&#x2F;C++最大的不同在于Java采用的指针模型可以消除重写内存和损坏数据的可能性。</p></blockquote></li><li><mark class="hl-label blue">安全性</mark><blockquote><p>从一开始，Java就设计成能够防范各种攻击，其中包括：</p><ul><li>运行时堆栈溢出（这是蠕虫和病毒常用的攻击手段）</li><li>破坏自己的进程空间之外的内存（<mark class="hl-label default">这里应该是指GC吧</mark>）</li><li>未经授权读写文件</li></ul><p>现在看来，尽管Java安全模型没有原先预想的那么成功，但Java在那个时代确实相当超前。</p></blockquote></li><li><mark class="hl-label blue">体系结构中立</mark><blockquote><p>Java编译器通过生成与特定计算体系结构无关的字节码来实现。精心设计的字节码不仅很容易在任何机器上解释执行，而且也很容易动态转换为原生机器代码。</p><p>为“虚拟机”生成代码在当时并不是一个新思路，诸如 Lisp、Smalltalk、Pascal等多年前就已经采用了这种技术。</p><p>当然，解释虚拟机指令肯定比全速运行机器指令慢很多。不过，虚拟机可以将执行最频繁的字节码序列转换成机器码，这一过程称为即时编译（just-in-time compilation）。</p><p>同时，虚拟机还可以检查指令序列的行为，从而增强安全性。</p></blockquote></li><li><mark class="hl-label blue">可移植性</mark><blockquote><p>与C和C++不同，Java规范中没有“依赖具体实现”的地方。基本数据类型的大小以及有关运算的行为都是明确的。</p><p>如：在Java中，数值类型有固定的字节数；二进制数据以固定的格式进行存储和传输；字符串则采用标准的Unicode格式存储。</p></blockquote></li><li><mark class="hl-label blue">解释性</mark><blockquote><p>Java解释器可以在任何移植了解释器的机器上直接执行Java字节码。</p></blockquote></li><li><mark class="hl-label blue">高性能</mark><blockquote><p>字节码可以（在运行时）动态转换为面向运行这个应用的特定CPU的机器码。</p><p>现在的即时编译器已经非常出色，可以与传统编译器相媲美，而且在某些情况下甚至超越了传统编译器，因为它们有更多的可用信息。</p><p>如：即时编译器可以监控哪些代码频繁执行，并优化这些代码以提高速度。</p></blockquote></li><li><mark class="hl-label blue">多线程</mark><blockquote><p>多线程可以带来更好的交互响应和实时行为。</p><p>Java在当时很超前。它是第一个支持并发程序设计的主流语言。</p><p>并发程序设计绝非易事，不过Java在这方面表现很出色，可以很好地管理这个工作。</p></blockquote></li><li><mark class="hl-label blue">动态性</mark><blockquote><p>需要为正在运行的程序增加代码时，动态性将是一个非常重要的特性。</p><p>Java设计为能够适应不断演进的环境。库可以自由地添加新方法和实例变量，而对客户端没有任何影响。</p></blockquote></li></ul><h2 id="1-3、Java-applet-与-Internet"><a href="#1-3、Java-applet-与-Internet" class="headerlink" title="1.3、Java applet 与 Internet"></a>1.3、Java applet 与 Internet</h2><p>在网页中运行的Java程序称为applet。applet首次出现时，人们欣喜若狂。但不同版本的浏览器运行不同版本的Java，导致难以利用Java最新版本来开发applet。后台，Java受到严重安全问题的困扰时，浏览器也放弃了对applet的支持。</p><h2 id="1-4、Java发展简史"><a href="#1-4、Java发展简史" class="headerlink" title="1.4、Java发展简史"></a>1.4、Java发展简史</h2><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 1.0</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>1996</p></div>        </div>        <div class='timeline-item-content'><p>1996年年初，Sun公司发布了Java的第1个版本。人们很快地意识到Java 1.0不能用来完成真正的应用开发。</p><p><mark class="hl-label blue">新增特性：</mark> 语言本身</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 1.1</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>1997</p></div>        </div>        <div class='timeline-item-content'><p>Java 1.1 弥补了大多明显的缺陷，大大改进了反射能力，并为GUI编程增加了新的事件处理模型。不过它仍然有很大的局限性。</p><p><mark class="hl-label blue">新增特性：</mark>  内部类</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 1.2</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>1998</p></div>        </div>        <div class='timeline-item-content'><p>Java 1.2 使用复杂而且可伸缩的工具包取代了早期玩具式的GUI喝图形工具包。</p><p>且更名为更加吸引人的 “Java2标准版软件开发包1.2版”。</p><p><mark class="hl-label blue">新增特性：</mark>  strictfp修饰符</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 1.3</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2000）</p></div>        </div>        <div class='timeline-item-content'><p>做出了增量式改进，提供了不断扩展的标准类库，提高了性能，修正一些BUG。</p><p><mark class="hl-label blue">新增特性：</mark>  无</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 1.4</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2002</p></div>        </div>        <div class='timeline-item-content'><p>做出了增量式改进，提供了不断扩展的标准类库，提高了性能，修正一些BUG。</p><p><mark class="hl-label blue">新增特性：</mark>  断言</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 5</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2004</p></div>        </div>        <div class='timeline-item-content'><p>5.0版本是自1.1版本以来第一个对Java语言做出重大改进的版本（这一版本原定为1.5版本，但2004年Java One会议后，版本号直接升为5.0）。此版本最具挑战性的一点在于，添加了泛型类型（generic type，大致相当于C++的模板），但却不需要对虚拟机做任何修改。</p><p><mark class="hl-label blue">新增特性：</mark>  泛型类、“for each”循环、可变参数、自动装箱、元数据、枚举、静态导入</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 6</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2006</p></div>        </div>        <div class='timeline-item-content'><p>同样，此版本没有对语言方面再进行修改，而是做了另外一些性能改进，并增强了类库。</p><p><mark class="hl-label blue">新增特性：</mark>  无</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 7</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2011</p></div>        </div>        <div class='timeline-item-content'><p>2009年Oracle收购Sun公司，知道2011年Oracle公司发布了Java的第一个版本— Java 7，其中只做了一些简单的改进。</p><p><mark class="hl-label blue">新增特性：</mark>  基于字符串的Switch语句、菱形运算符、二进制字面量】、异常处理增强</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 8</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2014</p></div>        </div>        <div class='timeline-item-content'><p>近20年中改变最大的版本。Java 8包含了一种“函数式”编程方式，可以很容易地表述能并发执行的计算。</p><p><mark class="hl-label blue">新增特性：</mark>  Lambda表达式、包含默认方法的接口、流和日期&#x2F;时间库。</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 9</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2017</p></div>        </div>        <div class='timeline-item-content'><p>Java9的主要特性要一直追溯到2008年。Java平台的首席工程师Mark Reinhold开始着力解析这个庞大的Java平台。为此引入了模块（module），模块是提供一个特定功能的自包含代码单元。</p><p>设计和实现一个适用于Java平台的模块系统前后用了11年，而它是否也适用于Java应用和类库还有待观察。</p><p><mark class="hl-label blue">新增特性：</mark>  模块、其他的语言和类库增强</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 11</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2018</p></div>        </div>        <div class='timeline-item-content'><p>从2018年开始，每6个月就会发布一个Java版本，以支持更快地引入新特性。每过一段时间，会把某个版本（Java 11 和 Java 17）指定为长期支持版本。中间版本提供了一种试验新特性的机制。</p><p><mark class="hl-label blue">新增特性：</mark>  局部变量类型推导（var）、HTTP客户端、移除Java FX、JNLP、Java EE重叠模块和CORBA</p></div>      </div></div><div class="timeline "><div class='timeline-item headline'>        <div class='timeline-item-title'>          <div class='item-circle'><p>Java 17</p></div>        </div>      </div><div class='timeline-item'>        <div class='timeline-item-title'>          <div class='item-circle'><p>2021）</p></div>        </div>        <div class='timeline-item-content'><p><mark class="hl-label blue">新增特性：</mark>  Switch表达式、文本块、instanceof模式匹配、记录、密封类</p></div>      </div></div><h2 id="1-5、关于Java的常用误解"><a href="#1-5、关于Java的常用误解" class="headerlink" title="1.5、关于Java的常用误解"></a>1.5、关于Java的常用误解</h2><ul><li><p>1、Java是HTML的扩展。</p><blockquote><p>Java是一种程序设计语言，HTML是一种描述网页结构的方式。</p></blockquote></li><li><p>2、我使用XML，所以不需要Java。</p><blockquote><p>Java是一种程序设计语言，XML是一种描述数据的方式。</p></blockquote></li><li><p>3、Java是一种非常容易学习的程序设计语言。</p><blockquote><p>像Java这种功能强大的语言大多都不太容易学习。</p></blockquote></li><li><p>4、Java将成为适用于所有平台的通用编程语言。</p><blockquote><p>从理论上讲，这是完全有可能的。但在实际中，某些领域其他语言有更出色的表现，比如，Objective C和后来的Swift在IOS设备上就有着无可取代的地位。浏览器中的处理几乎完全由JavaScript掌控。Windows程序通常都用C++或C#编写。Java在服务器端编程和跨平台客户端应用领域则很有优势。</p></blockquote></li><li><p>5、Java只不过是另外一种程序设计语言。</p><blockquote><p>程序设计语言的成功更多地取决于其支持系统（support system）的能力，而不是语法的精巧型。</p><p>Java的成功缘于其类库能够让人们轻松地完成原本有一定难度的工作，例如网络连接、Web应用和并发。Java减少了指针错误，这是一个额外的好处，因此使用Java编程的效率更高。但这些并不是Java成功的全部原因。</p></blockquote></li><li><p>6、Java是专用的，应该避免使用。</p><blockquote><p>Oracle公司一直致力于保持Java开源。目前有多个开源Java实现提供商，分别提供不同级别的承诺和支持。</p></blockquote></li><li><p>7、Java是解释性的，因此对于关键应用速度太慢了。</p><blockquote><p>早期的Java确实是解释性的。现在Java虚拟机使用了即时编译器，因此用Java编写的“热点”代码运行速度与C++相差无几，有些情况下甚至更快。</p></blockquote></li><li><p>8、所有的Java程序都在网页中运行。</p><blockquote><p>大多数Java程序都在服务器上运行，为网页生成代码或者计算业务逻辑。</p></blockquote></li><li><p>9、Java程序存在重大安全风险。</p><blockquote><p>对于早期的Java，有过关于Java安全系统失效的报道，曾经引起过公众关注。</p><p>如今，Java应用与其他应用同样安全。由于虚拟机提供的保护，Java应用比用C或C++编写的应用要安全得多。</p></blockquote></li><li><p>10、JavaScript是Java的简易版</p><blockquote><p>JavaScript是一种可以在网页中使用的脚本语言，它由Netscape发明，最初的名字是LiveScript。JavaScript的语法让人想到Java，因为名字也有些相像，但除此之外，两者并无任何关系。</p></blockquote></li><li><p>11、使用Java时，可以用廉价的“Internet设备”取代桌面计算机。</p><blockquote><p>如今世界已经发生改变，对于大多数最终用户，常用的平台往往是手机或平板电脑。这些设备大多使用Android（安卓）平台。学习Java编程对Android编程也很有帮助。</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> java核心技术 </category>
          
          <category> 开发基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 术语 </tag>
            
            <tag> 简史 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
